#!/bin/zsh

# Author: James Batman
# Date Created: 12/28/21
# Last Modified: 12/28/21

# Description
# print useful git commands 

# Usage
# githelp

c1="$(tput setaf 82)"
c2="$(tput setaf 123)"

echo "${c1}
\t Initializing a repository
\t -------------------------------------------------------------
\t git init
  
   
\t Staging files
\t -------------------------------------------------------------
\t git add file1.js                        $c2 # stages a single file $c1
\t git add file1.js file2.js git add *.js  $c2 # stages multiple files  $c1
\t git add .                               $c2 # stages the current directory and all its content $c1


\t Viewing the status   
\t -------------------------------------------------------------
\t git status                              $c2 # full status  $c1
\t git status -s                           $c2 # short status $c1
  
   
\t Committing the staged files
\t -------------------------------------------------------------
\t git commit -m “Message”                 $c2 # git commit $c1
\t git commit                              $c2 # opens the default editor to type a long message $c1
\t git commit -am “Message”                $c2 # skips the staging area    $c1
  
  
\t Removing files 
\t -------------------------------------------------------------
\t git rm file1.js                         $c2 # removes from working directory and staging area $c1
\t git rm --cached file1.js                $c2 # removes from staging area only $c1
\t git mv file1.js file1.txt               $c2 # renames or moves file    $c1
  
  
\t Viewing the staged/unstaged changes  
\t -------------------------------------------------------------
\t git diff                                $c2 # Shows unstaged changes   $c1
\t git diff --staged                       $c2 # Shows staged changes $c1
\t git diff --cached                       $c2 # same as above $c1
  
  
\t Viewing the history  git log
\t -------------------------------------------------------------
\t git log                                  $c2 # Full history $c1
\t git log --oneline                        $c2 # Summary  $c1
\t git log --reverse                        $c2 # Lists the commits from the oldest to the newest $c1
  
  
\t Viewing a commit   
\t -------------------------------------------------------------
\t git show 921a2ff                         $c2 # Shows the given commit $c1
\t git show HEAD                            $c2 # Shows the last commit $c1
\t git show HEAD~2                          $c2 # Two steps before the last commit $c1
\t git show HEAD:file.js                    $c2 # Shows the version of file.js stored in the last commit $c1
  
  
\t Unstaging files (undoing git add) 
\t -------------------------------------------------------------
\t git restore --staged file.js             $c2 # Copies the last version of file.js from repo to index $c1
  
  
\t Discarding local changes   
\t -------------------------------------------------------------
\t git restore file.js                       $c2 # Copies file.js from index to working directory $c1
\t git restore file1.js file2.js             $c2 # Restores multiple files in working directory $c1
\t git restore .                             $c2 # Discards all local changes (except untracked files)  $c1
\t git clean -fd                             $c2 # Removes all untracked files $c1
  
  
\t Restoring an earlier version of a file  
\t -------------------------------------------------------------
\t git restore --source=HEAD~2 file.js
  
  
\t Viewing the history
\t -------------------------------------------------------------
\t git log --stat                            $c2 # Shows the list of modified files $c1
\t git log --patch                           $c2 # Shows the actual changes (patches) $c1
  
  
\t Filtering the history
\t -------------------------------------------------------------
\t git log -3                                $c2 # show last 3 entries  $c1
\t git log --author='james'
\t git log --before='2020-08-17' git log --after='one week ago'
\t git log --grep=“GUI”                      $c2 # Commits with “GUI” in their message $c1
\t git log -S'GUI'                           $c2 # Commits with “GUI” in their patches $c1
\t git log hash1..hash2                      $c2 # Range of commits $c1
\t git log file.txt                          $c2 # Commits that touched file.txt $c1


\t git remote show origin
\t git remote add origin
\t git remote --verbose
\t ==================================
\t git pull --rebase
\t git stash
\t git pull
\t git stash apply
\t ==================================
\t git checkout -b <branch-name> main
\t git config pull.rebase false

\t git branch -a                           $c2 # list all branches, local & remote  $c1
\t git branch -r                           $c2 # list remote branches $c1
\t git branch tst1                         $c2 # create branch tst1 $c1
\t git push origin tst1                    $c2 # create remote branch tst1 $c1

\t git reset --merge                       $c2 # cancel the merg $c1
\t git reset --hard HEAD                   $c2 # reset all the changes back to the last commit
\t                                         $c2 #  -- this cannot be reverted $c1

\t git branch -r                           $c2 # list remote branches $c1
\t git fetch                               $c2 # retrieve latest meta-data $c1
\t git branch -r                           $c2 # list remote branches $c1
\t ==================================
\t git fetch
\t git branch -v -a                        $c2 # see all branches available for checkout $c1
\t git switch -c test origin/test          $c2 # create new local branch to work on $c1
\t ==================================
\t git config --global credential.helper 'cache --timeout=2592000'
\t ==================================
\t git stash -- git apply
\t ==================================
\t git fetch                               $c2 # get latest changes from remote repo $c1
\t git branch -v -a                        $c2 # see branches available for checkout $c1
\t git switch <branch name>                $c2 # create local branch from remote to work on it $c1
\t                                         $c2 #  (can leave off remotes/origin/) $c1
\t ==================================
\t git branch -c tmp                       $c2 # create new branch 'tmp' $c1
\t git checkout tmp
\t git checkout -b tmp                     $c2 # short cut both to create & checkout new branch 'tmp' $c1 
\t git add .
\t git commit -m ''
\t git push -u origin tmp                  $c2 # push to new remote branch $c1
\t ==================================
\t $c2 if the current branch, \"branch-name\", has no upstream branch
\t     push the current branch and set the remote as upstream: $c1
\t git push --set-upstream origin branch-name,
\t $c2  to have this happen automatically for branches without a tracking
\t      upstream, see 'push.autoSetupRemote' in 'git help config' $c1
\t ==================================
\t git remote add origin <url>
\t git branch -M main
\t git push -u origin main
\t ==================================
\t git reset --hard 68fc38313               $c2 # make a previous commit the HEAD $c1
\t git push origin <branch-name> --force    $c2 #  and on the remote $c1
\t ==================================
\t git reset --hard origin/<branch>         $c2 # discard local changes, and $c1
\t git fetch origin                         $c2 # bring local up to date with remote $c1
\t git pull origin <branch>
"

exit 0
