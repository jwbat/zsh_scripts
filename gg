#! python
'''
 encryption by Rustlang system tool, age ("a good encryption")
'''
import subprocess as sp
from sys import argv
from os import getenv, chdir
from pathlib import Path
from ageifier import (encrypt, decrypt, encrypt_dir, decrypt_dir, clear_directory, copy_dir, copy_into, abspath)
from dir_util import Dir
from colored import fg


getpath     = lambda s: Path(getenv(s))

home        = getpath('HOME')
dots        = getpath('DOTS')
scripts     = getpath('Z')
nvim        = getpath('NVIM')
predots     = Dir(getenv('PREDOTS'))
postdots    = Dir(getenv('POSTDOTS'))
repos       = [dots, scripts, nvim]
printcwd    = lambda : print(fg(137), Path.cwd())
clear       = lambda : sp.run(['clear'])


def update_predots():

    def update_configs():
        configs      = ('.zprofile', '.zsh_a', '.sbg-env', '.ui-env', '.aws', '.ssh')
        config_paths = [home / name for name in configs]
        [copy_into(p, predots.path / 'configs') for p in config_paths]

        snowconfig = predots.path / 'configs' / '.snowsql'
        clear_directory(snowconfig)
        copy_into(home / '.snowsql'/ 'config', snowconfig)


    def conditionally_backup_predots():
        if predots != postdots:
            print(fg(188) + ' predots & postdots differ. ' + fg(153) +'performing backup...')
            copy_dir(predots.path, dots / 'dotted')
            encrypt_dir(dots / 'dotted')
            copy_dir(dots / 'dotted', postdots.path)
            decrypt_dir(postdots.path)

    update_configs()
    conditionally_backup_predots()


def update_repos():
    commit_message = '.' if len(argv) < 2 else argv[1]
    repo_color, msg_color, msg2_color = fg(208), fg(186), fg(123)
    run_cmd = lambda cmd: sp.run(cmd, capture_output=True, text=True) 
    # git -C status --porcelain
    for dirpath in repos:
        dpath = abspath(dirpath)
        try:
            run_cmd(['git', '-C', dpath, 'add', '.'])
            if run_cmd(['git', '-C', dpath, 'status', '--porcelain']).stdout.strip():
                run_cmd(['git', '-C', dpath, 'commit', '-m', commit_message])
                run_cmd(['git', '-C', dpath, 'push', '-u', 'origin', 'main'])
                print(f'{msg2_color} Repository{repo_color} {dpath} {msg2_color}updated and pushed successfully.')
            else:
                print(f'{msg_color} No changes in repository{repo_color} {dpath}{msg_color}. skipping commit.')
        except sp.CalledProcessError as e:
            print(f'error running git command in {dpath}: {e}')


def print_dots_comparison():
    if predots == postdots:
        print(fg(86) + ' predots & postdots match.')
    else:
        print(fg(189) + ' ==> ' + fg(124) + ' error: predots & postdots do not match.')


def do_everything():
    clear()
    print()
    update_predots()
    chdir(scripts)
    printcwd()
    update_repos()
    print_dots_comparison()


do_everything()
