#! python
import json
import subprocess as sp
from os import environ, listdir
from os.path import join, expanduser, basename
from colored import fg
from utils import encrypt, decrypt, compare


home     = expanduser('~')
dotfiles = f'{home}/.dotfiles'
scripts  = f'{home}/code/shell/scripts'
repos    = [dotfiles, scripts]

get_encrypted_path = lambda s: s.replace(f'{home}', f'{dotfiles}') + '.age'

certdirs = [f'{home}/macbook_certs', f'{home}/vsd_macbook_certs']
orig_paths = [
    f'{home}/.zprofile', f'{home}/.zsh_a', f'{home}/.sbg-env', f'{home}/.ui-env',
    f'{home}/.snowsql/config', f'{home}/.aws/config', f'{home}/.aws/credentials'
] + [join(certdir, fname) for certdir in certdirs for fname in listdir(certdir)]

encrypted_paths = [get_encrypted_path(p) for p in orig_paths]


def ageify():
    for epath, opath in zip(encrypted_paths, orig_paths):
        encrypt(epath, opath)


def deageify(fpaths):
    msg_color = fg(204)
    success_color = fg(154)
    error_color = fg(230)
    decrypted_fpaths = get_decrypted_fpaths(fpaths)
    print(msg_color + 'comparing file encryption/decryptions...', end='  ')
    if all((compare(k, v) == 0 for k, v in decrypted_fpaths.items())):
        print(success_color + 'yay!  all decryptions match')
    else:
        [print('\n' + error_color + f'{k} & {v} do not match') 
         for k, v in decrypted_fpaths.items()
         if compare(k, v) != 0]


def update_repos():
    run_cmd = lambda cmd: sp.run(cmd, check=True, capture_output=True, text=True)

    for dpath in repos:
        try:
            result = run_cmd(['git', '-C', dpath, 'add', '.'])
            # print(f'Add output: {result.stdout.strip()}')
            # print(f'Add error: {result.stderr.strip()}', '\n')
            result = run_cmd(['git', '-C', dpath, 'commit', '-m', '.'])
            # print(f'commit output: {result.stdout.strip()}')
            # print(f'commit error: {result.stderr.strip()}', '\n')
            result = run_cmd(['git', '-C', dpath, 'push', '-u', 'origin', 'main'])
            # print(f'push output: {result.stdout.strip()}')
            # print(f'push error: {result.stderr.strip()}', '\n')
        except sp.CalledProcessError as e:
            print(f'error running git command in {dpath}: {e}')


ageify()
update_repos()
# deageify(fpaths)
