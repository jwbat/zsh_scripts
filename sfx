#!python3

'''
    Usage: ~ snow "<Snowflake query to execute>"
    see ~.snowsql/config for ubx configuration
'''
import os
import sys
import argparse
import subprocess as sp
from collections import deque


outfile = 'output.csv'


def cmd():
    query = parse_arguments()
    return ['snowsql', '-c', 'ubx', '-q', query, '-o', 'output_format=csv']


def parse_arguments():
    parser = argparse.ArgumentParser(description='')
    parser.add_argument('query', type=str, nargs='+')
    args = parser.parse_args()
    return ' '.join(args.query)


def bat_file(file):
    print()
    sp.run(['bat', file])
    print()


def count_lines(filename):
    result = sp.run(['wc', '-l', filename], stdout=sp.PIPE)
    return int(result.stdout.decode().split()[0])


def trim_file(outfile, N=2):
    ''' trim N lines from beginning and end of outfile '''
    dq = deque(maxlen=N)
    temp = 'temp.csv'
    sp.run(['mv', outfile, temp])
    with open(temp, 'r') as f, open(outfile, 'w') as out:
        for _ in range(N):
            next(f)
        for line in f:
            cleaned_line = line.replace('\\n', '')
            dq.append(cleaned_line)
            if len(dq) >= N:
                out.write(dq[0])

    sp.run(['rm', temp])


def main():
    with open(outfile, 'w') as f:
        try:
            sp.run(cmd(), stdout=f, stderr=sp.PIPE, check=True)
        except sp.CalledProcessError as e:
            print(f'command \n\n { parse_arguments() } \n\n returned non-zero exit status {e.returncode}.', file=sys.stderr)
            print(e.stderr.decode(), file=sys.stderr)

    ''' snowflake writes extra stuff at start & end of output '''
    if count_lines(outfile) > 4:
        trim_file(outfile)


main()
#bat_file(outfile)
