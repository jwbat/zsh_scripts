#! python
import json
import subprocess as sp
from os import environ, listdir
from os.path import join, expanduser
from colored import fg
from utils import encrypt, decrypt, compare


# directories
home = expanduser('~')
dotfiles = f'{home}/.dotfiles'
scripts = f'{home}/code/shell/scripts'
repos = [dotfiles, scripts]

fpaths = {
    f'{home}/.zprofile':        f'{dotfiles}/.zprofile.age',
    f'{home}/.zsh_a':           f'{dotfiles}/.zsh_a.age',
    f'{home}/.snowsql/config':  f'{dotfiles}/.snowsql_config.age',
    f'{home}/.aws/config':      f'{dotfiles}/.aws_config.age',
    f'{home}/.aws/credentials': f'{dotfiles}/.aws_credentials.age',
    f'{home}/.sbg-env':         f'{dotfiles}/.sbg-env.age',
    f'{home}/.ui-env':          f'{dotfiles}/.ui-env.age',
}


def add_cert_paths():
    source_dir = f'{home}/macbook_certs'
    dest_dir = f'{dotfiles}/macbook_certs_ageified'
    for fname in listdir(source_dir):
        source_path = join(source_dir, fname)
        dest_path = join(dest_dir, fname)
        fpaths[source_path] = dest_path


def get_decrypted_fpaths(fpaths):
    return { k + '2': k for k in fpaths.keys() }


def ageify():
    for fpath, fpath_age in fpaths.items():
        encrypt(fpath_age, fpath)


def deageify(fpaths):
    msg_color = fg(204)
    success_color = fg(154)
    error_color = fg(129)
    decrypted_fpaths = get_decrypted_fpaths(fpaths)
    print(msg_color + 'file encryption/decryption comparisons:')

    if all((compare(k, v) == 0 for k, v in get_decrypted_fpaths(fpaths).items())):
        print(success_color + 'all decryptions match')
    else:
        [print(error_color + f'{k} & {v} do not match') for k, v in get_decrypted_fpaths(fpaths).items() if compare(k, v) != 0]

    # for fpath, fpath_age in fpaths.items():
        # decrypted_path = fpath + '2'
        # decrypt(decrypted_path, fpath_age)
        # if compare(fpath, decrypted_path) == 0:
            # print(success_color + 'ok', end=' ')
        # else:
            # print(error_color + f' decryption error: {fpath} and {decrypted_path} do not match')
    print()



def update_repos():
    for directory in repos:
        try:
            sp.run(['git', '-C', directory, 'add', '.'], check=True)
            sp.run(['git', '-C', directory, 'commit', '-m', '.'], check=True)
            sp.run(['git', '-C', directory, 'push', '-u', 'origin', 'main'], check=True)
        except sp.CalledProcessError as e:
            print(f'error running git command in {directory}: {e}')


add_cert_paths()
ageify()
update_repos()
decrypted_fpaths = get_decrypted_fpaths(fpaths)
print(decrypted_fpaths)
