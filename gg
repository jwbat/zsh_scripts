#! python
'''
 encryption by Rustlang system tool, age ("a good encryption")
'''
import subprocess as sp
from sys import argv
from os import getenv, chdir, getcwd
from pathlib import Path
from ageifier import (encrypt, decrypt, encrypt_dir, decrypt_dir, clear_directory, copy_dir, copy_into, abspath)
from dir_utils import compare_dirs
from colored import fg


getpath     = lambda s: Path(getenv(s))

home        = getpath('HOME')
dots        = getpath('DOTS')
predots     = getpath('PREDOTS')
postdots    = home / 'postdots'
scripts     = getpath('Z')
repos       = [dots, scripts]
printcwd    = lambda : print(fg(250), 'cwd ', fg(137), getcwd())
dirs_match  = lambda d1, d2: not compare_dirs(d1, d2)
clear       = lambda : sp.run(['clear'])


def update_predots():

    def update_configs():
        configs      = ('.zprofile', '.zsh_a', '.sbg-env', '.ui-env', '.aws', '.ssh')
        config_paths = [home / name for name in configs]
        [copy_into(p, predots / 'configs') for p in config_paths]

        snowconfig = predots / 'configs' / '.snowsql'
        clear_directory(snowconfig)
        copy_into(home / '.snowsql'/ 'config', snowconfig)


    def conditionally_backup_predots():
        if not dirs_match(predots, postdots):
            print(fg(188) + ' predots & postdots differ: ' + fg(153) +'performing backup')
            # if predots & postdots differ, copy predots to dots, etc.
            copy_dir(predots, dots / 'dotted')
            encrypt_dir(dots / 'dotted')
            copy_dir(dots / 'dotted', postdots)
            decrypt_dir(postdots)

    update_configs()
    conditionally_backup_predots()


def update_repos():
    commit_message = '.' if len(argv) < 2 else argv[1]
    repo_color, msg_color, msg2_color = fg(208), fg(186), fg(123)
    run_cmd = lambda cmd: sp.run(cmd, capture_output=True, text=True) 
    for dirpath in repos:
        dpath = abspath(dirpath)
        try:
            run_cmd(['git', '-C', dpath, 'add', '.'])
            if run_cmd(['git', '-C', dpath, 'status', '--porcelain']).stdout.strip():
                run_cmd(['git', '-C', dpath, 'commit', '-m', commit_message])
                run_cmd(['git', '-C', dpath, 'push', '-u', 'origin', 'main'])
                print(f'{msg2_color} Repository{repo_color} {dpath} {msg2_color}updated and pushed successfully.')
            else:
                print(f'{msg_color} No changes in repository{repo_color} {dpath}{msg_color}. Skipping commit.')
        except sp.CalledProcessError as e:
            print(f'error running git command in {dpath}: {e}')


def print_dots_comparison():
    print(fg(86) + ' predots & postdots match: ' + fg(227) + dirs_match(predots, postdots))
    print()



def do_everything():
    clear()
    print()
    update_predots()
    chdir(scripts)
    printcwd()
    update_repos()
    print_dots_comparison()


do_everything()
